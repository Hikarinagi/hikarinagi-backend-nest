name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Format check
        run: pnpm run format:check

      - name: Lint check
        run: pnpm run lint:check

      - name: Type check
        run: pnpm run build

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({ping: 1})' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test
        env:
          NODE_ENV: test
          DATABASE_URI: mongodb://localhost:27017/hikarinagi-test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      # E2E tests disabled - relying on unit tests for coverage
      # - name: Run e2e tests
      #   run: pnpm run test:e2e
      #   env:
      #     NODE_ENV: test
      #     DATABASE_URI: mongodb://localhost:27017/hikarinagi-test
      #     REDIS_HOST: localhost
      #     REDIS_PORT: 6379

      - name: Generate coverage report
        run: pnpm run test:cov
        env:
          NODE_ENV: test
          DATABASE_URI: mongodb://localhost:27017/hikarinagi-test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      # ‰ΩøÁî® Action ËøõË°åÈÉ®ÁΩ≤ (Êé®ËçêÊñπÂºè)
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            # Âä†ËΩΩÁî®Êà∑ÁéØÂ¢ÉÂèòÈáè
            source ~/.bashrc 2>/dev/null || true
            source ~/.profile 2>/dev/null || true

            cd ${{ secrets.STAGING_APP_PATH }}
            git config --global --add safe.directory ${{ secrets.STAGING_APP_PATH }}
            git pull origin develop

            # Ê£ÄÊü•pnpmË∑ØÂæÑÂπ∂ËÆæÁΩÆ
            if command -v pnpm &> /dev/null; then
              echo "pnpm found: $(which pnpm)"
              PNPM_CMD="pnpm"
            elif [ -f ~/.local/share/pnpm/pnpm ]; then
              echo "pnpm found at ~/.local/share/pnpm/pnpm"
              PNPM_CMD="~/.local/share/pnpm/pnpm"
            elif [ -f /usr/local/bin/pnpm ]; then
              echo "pnpm found at /usr/local/bin/pnpm"
              PNPM_CMD="/usr/local/bin/pnpm"
            else
              echo "pnpm not found, installing..."
              npm install -g pnpm
              PNPM_CMD="pnpm"
            fi

            $PNPM_CMD install --frozen-lockfile
            $PNPM_CMD run build
            pm2 restart hikarinagi-backend-nestjs --env staging || pm2 start ecosystem.config.js --env staging
            pm2 save

      - name: Health check
        run: |
          echo "Waiting for staging server to be ready..."
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            # Âä†ËΩΩÁî®Êà∑ÁéØÂ¢ÉÂèòÈáè
            source ~/.bashrc 2>/dev/null || true
            source ~/.profile 2>/dev/null || true

            cd ${{ secrets.PRODUCTION_APP_PATH }}
            git config --global --add safe.directory ${{ secrets.PRODUCTION_APP_PATH }}
            git pull origin main

            # Ê£ÄÊü•pnpmË∑ØÂæÑÂπ∂ËÆæÁΩÆ
            if command -v pnpm &> /dev/null; then
              echo "pnpm found: $(which pnpm)"
              PNPM_CMD="pnpm"
            elif [ -f ~/.local/share/pnpm/pnpm ]; then
              echo "pnpm found at ~/.local/share/pnpm/pnpm"
              PNPM_CMD="~/.local/share/pnpm/pnpm"
            elif [ -f /usr/local/bin/pnpm ]; then
              echo "pnpm found at /usr/local/bin/pnpm"
              PNPM_CMD="/usr/local/bin/pnpm"
            else
              echo "pnpm not found, installing..."
              npm install -g pnpm
              PNPM_CMD="pnpm"
            fi

            $PNPM_CMD install --frozen-lockfile
            $PNPM_CMD run build
            pm2 restart hikarinagi-backend-nestjs --env production || pm2 start ecosystem.config.js --env production
            pm2 save

      - name: Health check
        run: |
          echo "Waiting for production server to be ready..."
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

      # - name: Notify deployment success
      #   uses: 8398a7/action-slack@v3
      #   if: success()
      #   with:
      #     status: success
      #     text: 'üöÄ Production deployment successful!'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Notify deployment failure
      #   uses: 8398a7/action-slack@v3
      #   if: failure()
      #   with:
      #     status: failure
      #     text: '‚ùå Production deployment failed!'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: pnpm audit --audit-level moderate || true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
