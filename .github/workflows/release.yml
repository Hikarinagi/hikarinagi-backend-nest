name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Run tests
        run: pnpm run test

      - name: Generate changelog
        id: changelog
        run: |
          # 获取上一个 tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # 生成变更日志
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges $PREVIOUS_TAG..HEAD)
          fi

          # 保存到文件
          echo "$CHANGELOG" > changelog.txt

          # 设置输出
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## 🚀 发布说明

            ### 📋 变更内容
            ${{ steps.changelog.outputs.changelog }}

                        ### 🔧 部署命令
            ```bash
            # 拉取最新代码
            git pull origin main

            # 安装依赖
            pnpm install --frozen-lockfile

            # 构建应用
            pnpm run build

            # 使用 PM2 重启应用
            pm2 restart ecosystem.config.js --env production
            pm2 save
            ```
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}

      - name: Upload build artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: hikarinagi-backend-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Notify team
        run: |
          echo "🎉 版本 ${{ github.ref_name }} 已成功发布！"
          # 这里可以添加通知逻辑，比如发送到 Slack、Discord 等
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🎉 hikarinagi-backend 版本 ${{ github.ref_name }} 已成功发布！"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
